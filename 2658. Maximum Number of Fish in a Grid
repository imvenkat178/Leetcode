class Solution {
    public int findMaxFish(int[][] grid) {
        int[] arr = new int[1];
        int visited[][] = new int[grid.length][grid[0].length];
        int max = 0;
        for(int i = 0 ; i<grid.length ;i++)
        {
            for(int j = 0; j< grid[0].length;j++)
            {
                
                if(grid[i][j]>0)
                {
                    dfs(grid,i,j,visited,arr);
                    if(arr[0]>max)
                    {
                        max = arr[0];
                    }
                    arr[0]=0;
                }
            }
        }
        return max;
        
    }

    private void dfs(int[][] grid,int i , int j,int[][] visited,int[] arr)
    {
        
        visited[i][j]=1;
        arr[0]+=grid[i][j];
        if(i-1>=0 && grid[i-1][j]>0 && visited[i-1][j]==0)
        {
            dfs(grid,i-1,j,visited,arr);
        }
        if(j-1>=0 && grid[i][j-1]>0 && visited[i][j-1]==0)
        {
            dfs(grid,i,j-1,visited,arr);
        }
        if(i+1<grid.length && grid[i+1][j]>0 && visited[i+1][j]==0)
        {
            dfs(grid,i+1,j,visited,arr);
        }
        if(j+1<grid[0].length && grid[i][j+1]>0 && visited[i][j+1]==0)
        {
            dfs(grid,i,j+1,visited,arr);
        }
    }
}
