/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxAncestorDiff(TreeNode root) {
        int currmax = Integer.MIN_VALUE;
        int currmin = Integer.MAX_VALUE;
        int diff[] = new int[1];
        diff[0] = Integer.MIN_VALUE;
        maxDiff(root , diff ,currmax,currmin);
        return diff[0];
    }

    private void maxDiff(TreeNode root , int[] diff ,int currmax ,int currmin)
    {
        if(root == null)
        {
            return;
        }
        if(root.val > currmax)
        {
            currmax = root.val;
        }
        if(root.val < currmin)
        {
            currmin = root.val;
        }
        if(root.left == null && root.right == null)
        {
            if(Math.abs(currmax-currmin) > diff[0])
            {
                diff[0] = Math.abs(currmax-currmin);
            }
        }
        maxDiff(root.left , diff ,currmax,currmin);
        maxDiff(root.right ,diff ,currmax,currmin);

    }
}
