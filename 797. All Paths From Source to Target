class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        path.add(0);
        int[] visited = new int[graph.length];
        for(int i : graph[0])
        {
            if(visited[i]!=1)
            {
                dfs(list , path , graph , visited , i);
            }
        }
        
        return list;
    }

    private void dfs(List<List<Integer>> list , List<Integer> path , int[][] graph , int[] visited ,int i)
    {
        

        visited[i] = 1;
        path.add(i);
        if( i == graph.length -1)
        {
            list.add(new ArrayList<Integer>(path));
        }
        for(int neigh : graph[i])
        {
            if(visited[neigh]!=1)
            {
                dfs(list , path , graph , visited , neigh);
            }
        }
        visited [i] = 0 ;
        path.remove(path.size()-1);
    }
}
