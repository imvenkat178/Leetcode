class Solution {
    public int nearestExit(char[][] maze, int[] entrance) {
        final int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int m = maze.length;
        int n = maze[0].length;
        int[][] visited = new int[m][n];
        Queue<int[]> q = new ArrayDeque<int[]>();
        q.add(entrance);
        visited[entrance[0]][entrance[1]] = 1;
        int steps = 0;

        while(!q.isEmpty())
        {
            steps++;
            for (int sz = q.size(); sz > 0; --sz) {
                int i = q.peek()[0];
                int j = q.poll()[1];
                for (int[] dir : dirs) {
                    int x = i + dir[0];
                    int y = j + dir[1];
                    if (x < 0 || x == m || y < 0 || y == n)
                        continue;
                    if (visited[x][y] == 1 || maze[x][y] == '+')
                        continue;
                    if (x == 0 || x == m - 1 || y == 0 || y == n - 1)
                        return steps;
                    q.offer(new int[] {x, y});
                    visited[x][y] = 1;
                }
            }
        }
    return -1;
    }
}
