class Solution {
    public List<String> wordSubsets(String[] words1, String[] words2) {
        List<String> list = new ArrayList<String>();
        Map<Character , Integer> map1 = new HashMap<Character,Integer>();
        for(int i = 0 ; i<words2.length;i++)
        {
            Map<Character , Integer> tempmap = new HashMap<Character,Integer>();
            for(int j=0;j<words2[i].length();j++)
            {
                tempmap.put(words2[i].charAt(j),tempmap.getOrDefault(words2[i].charAt(j),0)+1);
                map1.put(words2[i].charAt(j) , 
                map1.get(words2[i].charAt(j)) == null ? tempmap.get(words2[i].charAt(j)) : Math.max(tempmap.get(words2[i].charAt(j)) , map1.get(words2[i].charAt(j)))) ;
            }
        }

        
        for(int i = 0 ; i<words1.length;i++)
        {
            Map<Character , Integer> map2 = new HashMap<Character,Integer>();
            for(int j=0;j<words1[i].length();j++)
            {

                map2.put(words1[i].charAt(j),map2.getOrDefault(words1[i].charAt(j),0)+1);
            }

            boolean flag = true;
            for(Map.Entry<Character,Integer> e :map1.entrySet())
            {
                if(map2.get(e.getKey())== null || map1.get(e.getKey())>map2.get(e.getKey()))
                {
                   
                    System.out.println(e.getKey() + " " + words1[i]);
                     System.out.println( map1.get(e.getKey()) + " " + map2.get(e.getKey()));
                    flag = false;
                    break;
                }

            }
            if(flag)
            {
                list.add(words1[i]);
            }

        }
        return list;        
    }
}
