import java.util.*;

class Solution {
    public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] pre : prerequisites) {
            adj.get(pre[0]).add(pre[1]);
        }


        boolean[][] isPrerequisite = new boolean[numCourses][numCourses];
        for (int u = 0; u < numCourses; u++) {
            dfs(u, u, adj, isPrerequisite);
        }

        List<Boolean> res = new ArrayList<>();
        for (int[] query : queries) {
            res.add(isPrerequisite[query[0]][query[1]]);
        }
        return res;
    }

    private void dfs(int start, int current, List<List<Integer>> adj, boolean[][] isPrerequisite) {
        if (isPrerequisite[start][current]) {
            return;
        }
        isPrerequisite[start][current] = true;
        for (int neighbor : adj.get(current)) {
            dfs(start, neighbor, adj, isPrerequisite);
        }
    }
}
